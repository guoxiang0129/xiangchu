<template>
     <swiper :options="swiperOption" ref="mySwiper">
        <swiper-slide v-for="(item,index) in imglists" :key="index">
            <img :src="item">
        </swiper-slide>
        <div class="swiper-pagination" slot="pagination"></div>
    </swiper>
</template>
<script>
    // 引入插件的中两个组件，实现轮播图的页码
    import {
        swiper,
        swiperSlide
    } from 'vue-awesome-swiper'
    export default {
        data() {
            return {
                imglists: [],
                swiperOption: {
                    notNextTick: true,
                    // slidesPerView: 'auto',
                    autoplayDisplayOnInteration: false,
                    autoplay: 3500,
                    setWrapperSize: true,
                    pagination: '.swiper-pagination',
                    paginationClickable: true,
                    mousewheelControl: true,
                    observeParents: true,
                    onSlideChangeEnd: swiper => {
                        this.page = swiper.realIndex + 1;
                        this.index = swiper.realIndex;
                    }
                }
            }
        },
        computed: {
            swiper() {
                return this.$refs.mySwiper.swiper;
            }
        },
        // mounted() {
        //     //这边就可以使用swiper这个对象去使用swiper官网中的那些方法  
        //     this.swiper.slideTo(0, 0, false);
        // },
        methods: {
            getData: function() {
                var $this = this;
                this.$http.get('../../static/home.json').then(function(res) {
                    $this.imglists = res.data.data[0].bannerimgs;
                })
            }
        },
        created() {
            this.getData();
        },
        components: {
            swiper,
            swiperSlide
        }
    }
</script>
<style scoped>
    /*轮播容器，自己设置宽高*/
    
    .swiper-container {
        width: 100%;
        height: 5.375rem;
        font-size: 0;
    }
    
    img {
        width: 100%;
        -webkit-transition: all 2s;
        -o-transition: all 2s;
        transition: all 2s;
    }
    
    img[lazy=loading] {
        opacity: 0;
    }
    
    img[lazy=error] {}
    
    img[lazy=loaded] {
        opacity: 1;
    }
</style>