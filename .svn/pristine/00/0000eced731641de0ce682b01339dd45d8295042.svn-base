import Vue from 'vue'
import Vuex from 'vuex'
Vue.use(Vuex)

const state = {
    totalPrice: 0,
    arr: [],
    cartObj: {} //使用对象存放购物车商品
}
const mutations = {
    // 拷贝数据，保证操作不要影响原来的数据
    // copyItem: function(newitem, olditem) {
    //     for (var n in olditem) {
    //         newitem[n] = olditem[n];
    //     }
    //     return newitem;
    // },
    add: function(state, item) {
        // 拷贝数据，保证操作不要影响原来的数据
        var _item = {};
        for (var n in item) {
            _item[n] = item[n];
        }
        // 初次添加商品
        if (state.cartObj[_item.id] == undefined) {
            state.cartObj[_item.id] = item;
            state.cartObj[_item.id].count = 1; //自定义属性记录商品数量为1
            state.cartObj[_item.id].selected = true; //购物车中的商品默认勾选
        } else {
            state.cartObj[_item.id].count++; //商品已添加到购物车，只需修改数量
        }
        console.log(state.cartObj);
    },
    reduce: function(state, item) {
        //商品数量小于等于1的时候，从对象中移除这个属性
        if (state.cartObj[item.id] && state.cartObj[item.id] > 1) {
            state.cartObj[item.id].count--;
        } else {
            delete state.cartObj[item.id]; //移除
        }
    }
}
const actions = {
    add: function({ commit }, item) {
        commit('add', item);
    },
    reduce: function({ commit }, item) {
        commit('reduce', item);
    }
}
const getters = {
    // 获取购物车数据
    getList: function() {
        return state.cartObj;
    },
    getPrice: function() {
        //遍历对象，计算总价格
        state.totalPrice = 0;
        for (var n in state.cartObj) {
            if (state.cartObj[n]) {
                state.totalPrice += state.cartObj[n].price * state.cartObj[n].count;
            }
        }
        return state.totalPrice.toFixed(2);
    },
    // 将用对象存储的数据转换成数组,返回
    getArryLists: function() {
        state.arr = [];
        for (var n in state.cartObj) {
            state.arr.push(state.cartObj[n]);
        }
        console.log(state.arr);
        return state.arr;
    }
}
export default new Vuex.Store({
    state,
    mutations,
    actions,
    getters
})